// Code generated by MockGen. DO NOT EDIT.
// Source: problem1/services (interfaces: IUserRepository,IUserService)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ../mocks/mock.go . IUserRepository,IUserService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	models "problem1/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// FindFriendsByUserID mocks base method.
func (m *MockIUserRepository) FindFriendsByUserID(arg0 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFriendsByUserID", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFriendsByUserID indicates an expected call of FindFriendsByUserID.
func (mr *MockIUserRepositoryMockRecorder) FindFriendsByUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFriendsByUserID", reflect.TypeOf((*MockIUserRepository)(nil).FindFriendsByUserID), arg0)
}

// FindFriendsOfFriendsByUserID mocks base method.
func (m *MockIUserRepository) FindFriendsOfFriendsByUserID(arg0 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFriendsOfFriendsByUserID", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFriendsOfFriendsByUserID indicates an expected call of FindFriendsOfFriendsByUserID.
func (mr *MockIUserRepositoryMockRecorder) FindFriendsOfFriendsByUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFriendsOfFriendsByUserID", reflect.TypeOf((*MockIUserRepository)(nil).FindFriendsOfFriendsByUserID), arg0)
}

// FindFriendsOfFriendsPagingByUserID mocks base method.
func (m *MockIUserRepository) FindFriendsOfFriendsPagingByUserID(arg0, arg1, arg2 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFriendsOfFriendsPagingByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFriendsOfFriendsPagingByUserID indicates an expected call of FindFriendsOfFriendsPagingByUserID.
func (mr *MockIUserRepositoryMockRecorder) FindFriendsOfFriendsPagingByUserID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFriendsOfFriendsPagingByUserID", reflect.TypeOf((*MockIUserRepository)(nil).FindFriendsOfFriendsPagingByUserID), arg0, arg1, arg2)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetFriendsByUserID mocks base method.
func (m *MockIUserService) GetFriendsByUserID(arg0 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsByUserID", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsByUserID indicates an expected call of GetFriendsByUserID.
func (mr *MockIUserServiceMockRecorder) GetFriendsByUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsByUserID", reflect.TypeOf((*MockIUserService)(nil).GetFriendsByUserID), arg0)
}

// GetFriendsOfFriendsByUserID mocks base method.
func (m *MockIUserService) GetFriendsOfFriendsByUserID(arg0 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsOfFriendsByUserID", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsOfFriendsByUserID indicates an expected call of GetFriendsOfFriendsByUserID.
func (mr *MockIUserServiceMockRecorder) GetFriendsOfFriendsByUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsOfFriendsByUserID", reflect.TypeOf((*MockIUserService)(nil).GetFriendsOfFriendsByUserID), arg0)
}

// GetFriendsOfFriendsPagingByUserID mocks base method.
func (m *MockIUserService) GetFriendsOfFriendsPagingByUserID(arg0, arg1, arg2 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsOfFriendsPagingByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsOfFriendsPagingByUserID indicates an expected call of GetFriendsOfFriendsPagingByUserID.
func (mr *MockIUserServiceMockRecorder) GetFriendsOfFriendsPagingByUserID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsOfFriendsPagingByUserID", reflect.TypeOf((*MockIUserService)(nil).GetFriendsOfFriendsPagingByUserID), arg0, arg1, arg2)
}
