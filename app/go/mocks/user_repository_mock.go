// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"problem1/models"
	"sync"
)

// IUserRepositoryMock is a mock implementation of services.IUserRepository.
//
//	func TestSomethingThatUsesIUserRepository(t *testing.T) {
//
//		// make and configure a mocked services.IUserRepository
//		mockedIUserRepository := &IUserRepositoryMock{
//			FindBlockUsersByIDFunc: func(id int64) ([]*models.User, error) {
//				panic("mock out the FindBlockUsersByID method")
//			},
//			FindFriendsByIDFunc: func(id int64) ([]*models.User, error) {
//				panic("mock out the FindFriendsByID method")
//			},
//			FindFriendsOfFriendsByIDFunc: func(id int64) ([]*models.User, error) {
//				panic("mock out the FindFriendsOfFriendsByID method")
//			},
//			FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc: func(id int64, excludeIDs []int64, page int, limit int) ([]*models.User, error) {
//				panic("mock out the FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination method")
//			},
//		}
//
//		// use mockedIUserRepository in code that requires services.IUserRepository
//		// and then make assertions.
//
//	}
type IUserRepositoryMock struct {
	// FindBlockUsersByIDFunc mocks the FindBlockUsersByID method.
	FindBlockUsersByIDFunc func(id int64) ([]*models.User, error)

	// FindFriendsByIDFunc mocks the FindFriendsByID method.
	FindFriendsByIDFunc func(id int64) ([]*models.User, error)

	// FindFriendsOfFriendsByIDFunc mocks the FindFriendsOfFriendsByID method.
	FindFriendsOfFriendsByIDFunc func(id int64) ([]*models.User, error)

	// FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc mocks the FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination method.
	FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc func(id int64, excludeIDs []int64, page int, limit int) ([]*models.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindBlockUsersByID holds details about calls to the FindBlockUsersByID method.
		FindBlockUsersByID []struct {
			// ID is the id argument value.
			ID int64
		}
		// FindFriendsByID holds details about calls to the FindFriendsByID method.
		FindFriendsByID []struct {
			// ID is the id argument value.
			ID int64
		}
		// FindFriendsOfFriendsByID holds details about calls to the FindFriendsOfFriendsByID method.
		FindFriendsOfFriendsByID []struct {
			// ID is the id argument value.
			ID int64
		}
		// FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination holds details about calls to the FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination method.
		FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination []struct {
			// ID is the id argument value.
			ID int64
			// ExcludeIDs is the excludeIDs argument value.
			ExcludeIDs []int64
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockFindBlockUsersByID                                       sync.RWMutex
	lockFindFriendsByID                                          sync.RWMutex
	lockFindFriendsOfFriendsByID                                 sync.RWMutex
	lockFindFriendsOfFriendsExcludingSomeUsersByIDWithPagination sync.RWMutex
}

// FindBlockUsersByID calls FindBlockUsersByIDFunc.
func (mock *IUserRepositoryMock) FindBlockUsersByID(id int64) ([]*models.User, error) {
	if mock.FindBlockUsersByIDFunc == nil {
		panic("IUserRepositoryMock.FindBlockUsersByIDFunc: method is nil but IUserRepository.FindBlockUsersByID was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockFindBlockUsersByID.Lock()
	mock.calls.FindBlockUsersByID = append(mock.calls.FindBlockUsersByID, callInfo)
	mock.lockFindBlockUsersByID.Unlock()
	return mock.FindBlockUsersByIDFunc(id)
}

// FindBlockUsersByIDCalls gets all the calls that were made to FindBlockUsersByID.
// Check the length with:
//
//	len(mockedIUserRepository.FindBlockUsersByIDCalls())
func (mock *IUserRepositoryMock) FindBlockUsersByIDCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockFindBlockUsersByID.RLock()
	calls = mock.calls.FindBlockUsersByID
	mock.lockFindBlockUsersByID.RUnlock()
	return calls
}

// FindFriendsByID calls FindFriendsByIDFunc.
func (mock *IUserRepositoryMock) FindFriendsByID(id int64) ([]*models.User, error) {
	if mock.FindFriendsByIDFunc == nil {
		panic("IUserRepositoryMock.FindFriendsByIDFunc: method is nil but IUserRepository.FindFriendsByID was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockFindFriendsByID.Lock()
	mock.calls.FindFriendsByID = append(mock.calls.FindFriendsByID, callInfo)
	mock.lockFindFriendsByID.Unlock()
	return mock.FindFriendsByIDFunc(id)
}

// FindFriendsByIDCalls gets all the calls that were made to FindFriendsByID.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsByIDCalls())
func (mock *IUserRepositoryMock) FindFriendsByIDCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockFindFriendsByID.RLock()
	calls = mock.calls.FindFriendsByID
	mock.lockFindFriendsByID.RUnlock()
	return calls
}

// FindFriendsOfFriendsByID calls FindFriendsOfFriendsByIDFunc.
func (mock *IUserRepositoryMock) FindFriendsOfFriendsByID(id int64) ([]*models.User, error) {
	if mock.FindFriendsOfFriendsByIDFunc == nil {
		panic("IUserRepositoryMock.FindFriendsOfFriendsByIDFunc: method is nil but IUserRepository.FindFriendsOfFriendsByID was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockFindFriendsOfFriendsByID.Lock()
	mock.calls.FindFriendsOfFriendsByID = append(mock.calls.FindFriendsOfFriendsByID, callInfo)
	mock.lockFindFriendsOfFriendsByID.Unlock()
	return mock.FindFriendsOfFriendsByIDFunc(id)
}

// FindFriendsOfFriendsByIDCalls gets all the calls that were made to FindFriendsOfFriendsByID.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsOfFriendsByIDCalls())
func (mock *IUserRepositoryMock) FindFriendsOfFriendsByIDCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockFindFriendsOfFriendsByID.RLock()
	calls = mock.calls.FindFriendsOfFriendsByID
	mock.lockFindFriendsOfFriendsByID.RUnlock()
	return calls
}

// FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination calls FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc.
func (mock *IUserRepositoryMock) FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination(id int64, excludeIDs []int64, page int, limit int) ([]*models.User, error) {
	if mock.FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc == nil {
		panic("IUserRepositoryMock.FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc: method is nil but IUserRepository.FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination was just called")
	}
	callInfo := struct {
		ID         int64
		ExcludeIDs []int64
		Page       int
		Limit      int
	}{
		ID:         id,
		ExcludeIDs: excludeIDs,
		Page:       page,
		Limit:      limit,
	}
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByIDWithPagination.Lock()
	mock.calls.FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination = append(mock.calls.FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination, callInfo)
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByIDWithPagination.Unlock()
	return mock.FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationFunc(id, excludeIDs, page, limit)
}

// FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationCalls gets all the calls that were made to FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationCalls())
func (mock *IUserRepositoryMock) FindFriendsOfFriendsExcludingSomeUsersByIDWithPaginationCalls() []struct {
	ID         int64
	ExcludeIDs []int64
	Page       int
	Limit      int
} {
	var calls []struct {
		ID         int64
		ExcludeIDs []int64
		Page       int
		Limit      int
	}
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByIDWithPagination.RLock()
	calls = mock.calls.FindFriendsOfFriendsExcludingSomeUsersByIDWithPagination
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByIDWithPagination.RUnlock()
	return calls
}
