// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"problem1/models"
	"sync"
)

// IUserServiceMock is a mock implementation of services.IUserService.
//
//	func TestSomethingThatUsesIUserService(t *testing.T) {
//
//		// make and configure a mocked services.IUserService
//		mockedIUserService := &IUserServiceMock{
//			GetFriendListFunc: func(id int64) ([]*models.User, error) {
//				panic("mock out the GetFriendList method")
//			},
//			GetFriendOfFriendListFunc: func(id int64) ([]*models.User, error) {
//				panic("mock out the GetFriendOfFriendList method")
//			},
//			GetFriendOfFriendListPagingFunc: func(id int64, page int, limit int) ([]*models.User, error) {
//				panic("mock out the GetFriendOfFriendListPaging method")
//			},
//		}
//
//		// use mockedIUserService in code that requires services.IUserService
//		// and then make assertions.
//
//	}
type IUserServiceMock struct {
	// GetFriendListFunc mocks the GetFriendList method.
	GetFriendListFunc func(id int64) ([]*models.User, error)

	// GetFriendOfFriendListFunc mocks the GetFriendOfFriendList method.
	GetFriendOfFriendListFunc func(id int64) ([]*models.User, error)

	// GetFriendOfFriendListPagingFunc mocks the GetFriendOfFriendListPaging method.
	GetFriendOfFriendListPagingFunc func(id int64, page int, limit int) ([]*models.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFriendList holds details about calls to the GetFriendList method.
		GetFriendList []struct {
			// ID is the id argument value.
			ID int64
		}
		// GetFriendOfFriendList holds details about calls to the GetFriendOfFriendList method.
		GetFriendOfFriendList []struct {
			// ID is the id argument value.
			ID int64
		}
		// GetFriendOfFriendListPaging holds details about calls to the GetFriendOfFriendListPaging method.
		GetFriendOfFriendListPaging []struct {
			// ID is the id argument value.
			ID int64
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockGetFriendList               sync.RWMutex
	lockGetFriendOfFriendList       sync.RWMutex
	lockGetFriendOfFriendListPaging sync.RWMutex
}

// GetFriendList calls GetFriendListFunc.
func (mock *IUserServiceMock) GetFriendList(id int64) ([]*models.User, error) {
	if mock.GetFriendListFunc == nil {
		panic("IUserServiceMock.GetFriendListFunc: method is nil but IUserService.GetFriendList was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetFriendList.Lock()
	mock.calls.GetFriendList = append(mock.calls.GetFriendList, callInfo)
	mock.lockGetFriendList.Unlock()
	return mock.GetFriendListFunc(id)
}

// GetFriendListCalls gets all the calls that were made to GetFriendList.
// Check the length with:
//
//	len(mockedIUserService.GetFriendListCalls())
func (mock *IUserServiceMock) GetFriendListCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetFriendList.RLock()
	calls = mock.calls.GetFriendList
	mock.lockGetFriendList.RUnlock()
	return calls
}

// GetFriendOfFriendList calls GetFriendOfFriendListFunc.
func (mock *IUserServiceMock) GetFriendOfFriendList(id int64) ([]*models.User, error) {
	if mock.GetFriendOfFriendListFunc == nil {
		panic("IUserServiceMock.GetFriendOfFriendListFunc: method is nil but IUserService.GetFriendOfFriendList was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetFriendOfFriendList.Lock()
	mock.calls.GetFriendOfFriendList = append(mock.calls.GetFriendOfFriendList, callInfo)
	mock.lockGetFriendOfFriendList.Unlock()
	return mock.GetFriendOfFriendListFunc(id)
}

// GetFriendOfFriendListCalls gets all the calls that were made to GetFriendOfFriendList.
// Check the length with:
//
//	len(mockedIUserService.GetFriendOfFriendListCalls())
func (mock *IUserServiceMock) GetFriendOfFriendListCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetFriendOfFriendList.RLock()
	calls = mock.calls.GetFriendOfFriendList
	mock.lockGetFriendOfFriendList.RUnlock()
	return calls
}

// GetFriendOfFriendListPaging calls GetFriendOfFriendListPagingFunc.
func (mock *IUserServiceMock) GetFriendOfFriendListPaging(id int64, page int, limit int) ([]*models.User, error) {
	if mock.GetFriendOfFriendListPagingFunc == nil {
		panic("IUserServiceMock.GetFriendOfFriendListPagingFunc: method is nil but IUserService.GetFriendOfFriendListPaging was just called")
	}
	callInfo := struct {
		ID    int64
		Page  int
		Limit int
	}{
		ID:    id,
		Page:  page,
		Limit: limit,
	}
	mock.lockGetFriendOfFriendListPaging.Lock()
	mock.calls.GetFriendOfFriendListPaging = append(mock.calls.GetFriendOfFriendListPaging, callInfo)
	mock.lockGetFriendOfFriendListPaging.Unlock()
	return mock.GetFriendOfFriendListPagingFunc(id, page, limit)
}

// GetFriendOfFriendListPagingCalls gets all the calls that were made to GetFriendOfFriendListPaging.
// Check the length with:
//
//	len(mockedIUserService.GetFriendOfFriendListPagingCalls())
func (mock *IUserServiceMock) GetFriendOfFriendListPagingCalls() []struct {
	ID    int64
	Page  int
	Limit int
} {
	var calls []struct {
		ID    int64
		Page  int
		Limit int
	}
	mock.lockGetFriendOfFriendListPaging.RLock()
	calls = mock.calls.GetFriendOfFriendListPaging
	mock.lockGetFriendOfFriendListPaging.RUnlock()
	return calls
}
