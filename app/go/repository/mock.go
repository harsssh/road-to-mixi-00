// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"problem1/models"
	"sync"
)

// IUserRepositoryMock is a mock implementation of services.IUserRepository.
//
//	func TestSomethingThatUsesIUserRepository(t *testing.T) {
//
//		// make and configure a mocked services.IUserRepository
//		mockedIUserRepository := &IUserRepositoryMock{
//			FindBlockedUsersByUserIDFunc: func(userID int) ([]*models.User, error) {
//				panic("mock out the FindBlockedUsersByUserID method")
//			},
//			FindFriendsByUserIDFunc: func(userID int) ([]*models.User, error) {
//				panic("mock out the FindFriendsByUserID method")
//			},
//			FindFriendsOfFriendsByUserIDFunc: func(userID int) ([]*models.User, error) {
//				panic("mock out the FindFriendsOfFriendsByUserID method")
//			},
//			FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc: func(userID int, excludedUserIDs []int, page int, limit int) ([]*models.User, error) {
//				panic("mock out the FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination method")
//			},
//		}
//
//		// use mockedIUserRepository in code that requires services.IUserRepository
//		// and then make assertions.
//
//	}
type IUserRepositoryMock struct {
	// FindBlockedUsersByUserIDFunc mocks the FindBlockedUsersByUserID method.
	FindBlockedUsersByUserIDFunc func(userID int) ([]*models.User, error)

	// FindFriendsByUserIDFunc mocks the FindFriendsByUserID method.
	FindFriendsByUserIDFunc func(userID int) ([]*models.User, error)

	// FindFriendsOfFriendsByUserIDFunc mocks the FindFriendsOfFriendsByUserID method.
	FindFriendsOfFriendsByUserIDFunc func(userID int) ([]*models.User, error)

	// FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc mocks the FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination method.
	FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc func(userID int, excludedUserIDs []int, page int, limit int) ([]*models.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindBlockedUsersByUserID holds details about calls to the FindBlockedUsersByUserID method.
		FindBlockedUsersByUserID []struct {
			// UserID is the userID argument value.
			UserID int
		}
		// FindFriendsByUserID holds details about calls to the FindFriendsByUserID method.
		FindFriendsByUserID []struct {
			// UserID is the userID argument value.
			UserID int
		}
		// FindFriendsOfFriendsByUserID holds details about calls to the FindFriendsOfFriendsByUserID method.
		FindFriendsOfFriendsByUserID []struct {
			// UserID is the userID argument value.
			UserID int
		}
		// FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination holds details about calls to the FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination method.
		FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination []struct {
			// UserID is the userID argument value.
			UserID int
			// ExcludedUserIDs is the excludedUserIDs argument value.
			ExcludedUserIDs []int
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockFindBlockedUsersByUserID                                     sync.RWMutex
	lockFindFriendsByUserID                                          sync.RWMutex
	lockFindFriendsOfFriendsByUserID                                 sync.RWMutex
	lockFindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination sync.RWMutex
}

// FindBlockedUsersByUserID calls FindBlockedUsersByUserIDFunc.
func (mock *IUserRepositoryMock) FindBlockedUsersByUserID(userID int) ([]*models.User, error) {
	if mock.FindBlockedUsersByUserIDFunc == nil {
		panic("IUserRepositoryMock.FindBlockedUsersByUserIDFunc: method is nil but IUserRepository.FindBlockedUsersByUserID was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockFindBlockedUsersByUserID.Lock()
	mock.calls.FindBlockedUsersByUserID = append(mock.calls.FindBlockedUsersByUserID, callInfo)
	mock.lockFindBlockedUsersByUserID.Unlock()
	return mock.FindBlockedUsersByUserIDFunc(userID)
}

// FindBlockedUsersByUserIDCalls gets all the calls that were made to FindBlockedUsersByUserID.
// Check the length with:
//
//	len(mockedIUserRepository.FindBlockedUsersByUserIDCalls())
func (mock *IUserRepositoryMock) FindBlockedUsersByUserIDCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockFindBlockedUsersByUserID.RLock()
	calls = mock.calls.FindBlockedUsersByUserID
	mock.lockFindBlockedUsersByUserID.RUnlock()
	return calls
}

// FindFriendsByUserID calls FindFriendsByUserIDFunc.
func (mock *IUserRepositoryMock) FindFriendsByUserID(userID int) ([]*models.User, error) {
	if mock.FindFriendsByUserIDFunc == nil {
		panic("IUserRepositoryMock.FindFriendsByUserIDFunc: method is nil but IUserRepository.FindFriendsByUserID was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockFindFriendsByUserID.Lock()
	mock.calls.FindFriendsByUserID = append(mock.calls.FindFriendsByUserID, callInfo)
	mock.lockFindFriendsByUserID.Unlock()
	return mock.FindFriendsByUserIDFunc(userID)
}

// FindFriendsByUserIDCalls gets all the calls that were made to FindFriendsByUserID.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsByUserIDCalls())
func (mock *IUserRepositoryMock) FindFriendsByUserIDCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockFindFriendsByUserID.RLock()
	calls = mock.calls.FindFriendsByUserID
	mock.lockFindFriendsByUserID.RUnlock()
	return calls
}

// FindFriendsOfFriendsByUserID calls FindFriendsOfFriendsByUserIDFunc.
func (mock *IUserRepositoryMock) FindFriendsOfFriendsByUserID(userID int) ([]*models.User, error) {
	if mock.FindFriendsOfFriendsByUserIDFunc == nil {
		panic("IUserRepositoryMock.FindFriendsOfFriendsByUserIDFunc: method is nil but IUserRepository.FindFriendsOfFriendsByUserID was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockFindFriendsOfFriendsByUserID.Lock()
	mock.calls.FindFriendsOfFriendsByUserID = append(mock.calls.FindFriendsOfFriendsByUserID, callInfo)
	mock.lockFindFriendsOfFriendsByUserID.Unlock()
	return mock.FindFriendsOfFriendsByUserIDFunc(userID)
}

// FindFriendsOfFriendsByUserIDCalls gets all the calls that were made to FindFriendsOfFriendsByUserID.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsOfFriendsByUserIDCalls())
func (mock *IUserRepositoryMock) FindFriendsOfFriendsByUserIDCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockFindFriendsOfFriendsByUserID.RLock()
	calls = mock.calls.FindFriendsOfFriendsByUserID
	mock.lockFindFriendsOfFriendsByUserID.RUnlock()
	return calls
}

// FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination calls FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc.
func (mock *IUserRepositoryMock) FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination(userID int, excludedUserIDs []int, page int, limit int) ([]*models.User, error) {
	if mock.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc == nil {
		panic("IUserRepositoryMock.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc: method is nil but IUserRepository.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination was just called")
	}
	callInfo := struct {
		UserID          int
		ExcludedUserIDs []int
		Page            int
		Limit           int
	}{
		UserID:          userID,
		ExcludedUserIDs: excludedUserIDs,
		Page:            page,
		Limit:           limit,
	}
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination.Lock()
	mock.calls.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination = append(mock.calls.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination, callInfo)
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination.Unlock()
	return mock.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationFunc(userID, excludedUserIDs, page, limit)
}

// FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationCalls gets all the calls that were made to FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination.
// Check the length with:
//
//	len(mockedIUserRepository.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationCalls())
func (mock *IUserRepositoryMock) FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPaginationCalls() []struct {
	UserID          int
	ExcludedUserIDs []int
	Page            int
	Limit           int
} {
	var calls []struct {
		UserID          int
		ExcludedUserIDs []int
		Page            int
		Limit           int
	}
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination.RLock()
	calls = mock.calls.FindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination
	mock.lockFindFriendsOfFriendsExcludingSomeUsersByUserIDWithPagination.RUnlock()
	return calls
}
