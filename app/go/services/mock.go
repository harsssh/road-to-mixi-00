// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"problem1/models"
	"sync"
)

// Ensure, that IUserServiceMock does implement IUserService.
// If this is not the case, regenerate this file with moq.
var _ IUserService = &IUserServiceMock{}

// IUserServiceMock is a mock implementation of IUserService.
//
//	func TestSomethingThatUsesIUserService(t *testing.T) {
//
//		// make and configure a mocked IUserService
//		mockedIUserService := &IUserServiceMock{
//			GetFriendsByUserIDFunc: func(userID int) ([]*models.User, error) {
//				panic("mock out the GetFriendsByUserID method")
//			},
//			GetFriendsOfFriendsByUserIDFunc: func(userID int) ([]*models.User, error) {
//				panic("mock out the GetFriendsOfFriendsByUserID method")
//			},
//			GetFriendsOfFriendsPagingByUserIDFunc: func(userID int, page int, limit int) ([]*models.User, error) {
//				panic("mock out the GetFriendsOfFriendsPagingByUserID method")
//			},
//		}
//
//		// use mockedIUserService in code that requires IUserService
//		// and then make assertions.
//
//	}
type IUserServiceMock struct {
	// GetFriendsByUserIDFunc mocks the GetFriendsByUserID method.
	GetFriendsByUserIDFunc func(userID int) ([]*models.User, error)

	// GetFriendsOfFriendsByUserIDFunc mocks the GetFriendsOfFriendsByUserID method.
	GetFriendsOfFriendsByUserIDFunc func(userID int) ([]*models.User, error)

	// GetFriendsOfFriendsPagingByUserIDFunc mocks the GetFriendsOfFriendsPagingByUserID method.
	GetFriendsOfFriendsPagingByUserIDFunc func(userID int, page int, limit int) ([]*models.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFriendsByUserID holds details about calls to the GetFriendsByUserID method.
		GetFriendsByUserID []struct {
			// UserID is the userID argument value.
			UserID int
		}
		// GetFriendsOfFriendsByUserID holds details about calls to the GetFriendsOfFriendsByUserID method.
		GetFriendsOfFriendsByUserID []struct {
			// UserID is the userID argument value.
			UserID int
		}
		// GetFriendsOfFriendsPagingByUserID holds details about calls to the GetFriendsOfFriendsPagingByUserID method.
		GetFriendsOfFriendsPagingByUserID []struct {
			// UserID is the userID argument value.
			UserID int
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockGetFriendsByUserID                sync.RWMutex
	lockGetFriendsOfFriendsByUserID       sync.RWMutex
	lockGetFriendsOfFriendsPagingByUserID sync.RWMutex
}

// GetFriendsByUserID calls GetFriendsByUserIDFunc.
func (mock *IUserServiceMock) GetFriendsByUserID(userID int) ([]*models.User, error) {
	if mock.GetFriendsByUserIDFunc == nil {
		panic("IUserServiceMock.GetFriendsByUserIDFunc: method is nil but IUserService.GetFriendsByUserID was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockGetFriendsByUserID.Lock()
	mock.calls.GetFriendsByUserID = append(mock.calls.GetFriendsByUserID, callInfo)
	mock.lockGetFriendsByUserID.Unlock()
	return mock.GetFriendsByUserIDFunc(userID)
}

// GetFriendsByUserIDCalls gets all the calls that were made to GetFriendsByUserID.
// Check the length with:
//
//	len(mockedIUserService.GetFriendsByUserIDCalls())
func (mock *IUserServiceMock) GetFriendsByUserIDCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockGetFriendsByUserID.RLock()
	calls = mock.calls.GetFriendsByUserID
	mock.lockGetFriendsByUserID.RUnlock()
	return calls
}

// GetFriendsOfFriendsByUserID calls GetFriendsOfFriendsByUserIDFunc.
func (mock *IUserServiceMock) GetFriendsOfFriendsByUserID(userID int) ([]*models.User, error) {
	if mock.GetFriendsOfFriendsByUserIDFunc == nil {
		panic("IUserServiceMock.GetFriendsOfFriendsByUserIDFunc: method is nil but IUserService.GetFriendsOfFriendsByUserID was just called")
	}
	callInfo := struct {
		UserID int
	}{
		UserID: userID,
	}
	mock.lockGetFriendsOfFriendsByUserID.Lock()
	mock.calls.GetFriendsOfFriendsByUserID = append(mock.calls.GetFriendsOfFriendsByUserID, callInfo)
	mock.lockGetFriendsOfFriendsByUserID.Unlock()
	return mock.GetFriendsOfFriendsByUserIDFunc(userID)
}

// GetFriendsOfFriendsByUserIDCalls gets all the calls that were made to GetFriendsOfFriendsByUserID.
// Check the length with:
//
//	len(mockedIUserService.GetFriendsOfFriendsByUserIDCalls())
func (mock *IUserServiceMock) GetFriendsOfFriendsByUserIDCalls() []struct {
	UserID int
} {
	var calls []struct {
		UserID int
	}
	mock.lockGetFriendsOfFriendsByUserID.RLock()
	calls = mock.calls.GetFriendsOfFriendsByUserID
	mock.lockGetFriendsOfFriendsByUserID.RUnlock()
	return calls
}

// GetFriendsOfFriendsPagingByUserID calls GetFriendsOfFriendsPagingByUserIDFunc.
func (mock *IUserServiceMock) GetFriendsOfFriendsPagingByUserID(userID int, page int, limit int) ([]*models.User, error) {
	if mock.GetFriendsOfFriendsPagingByUserIDFunc == nil {
		panic("IUserServiceMock.GetFriendsOfFriendsPagingByUserIDFunc: method is nil but IUserService.GetFriendsOfFriendsPagingByUserID was just called")
	}
	callInfo := struct {
		UserID int
		Page   int
		Limit  int
	}{
		UserID: userID,
		Page:   page,
		Limit:  limit,
	}
	mock.lockGetFriendsOfFriendsPagingByUserID.Lock()
	mock.calls.GetFriendsOfFriendsPagingByUserID = append(mock.calls.GetFriendsOfFriendsPagingByUserID, callInfo)
	mock.lockGetFriendsOfFriendsPagingByUserID.Unlock()
	return mock.GetFriendsOfFriendsPagingByUserIDFunc(userID, page, limit)
}

// GetFriendsOfFriendsPagingByUserIDCalls gets all the calls that were made to GetFriendsOfFriendsPagingByUserID.
// Check the length with:
//
//	len(mockedIUserService.GetFriendsOfFriendsPagingByUserIDCalls())
func (mock *IUserServiceMock) GetFriendsOfFriendsPagingByUserIDCalls() []struct {
	UserID int
	Page   int
	Limit  int
} {
	var calls []struct {
		UserID int
		Page   int
		Limit  int
	}
	mock.lockGetFriendsOfFriendsPagingByUserID.RLock()
	calls = mock.calls.GetFriendsOfFriendsPagingByUserID
	mock.lockGetFriendsOfFriendsPagingByUserID.RUnlock()
	return calls
}
